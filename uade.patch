diff --git a/src/audio.c b/src/audio.c
index 1b62c4b..dccd338 100644
--- a/src/audio.c
+++ b/src/audio.c
@@ -209,8 +209,8 @@ static inline void sample_backend(int left, int right)
 #endif
 
     /* samples are in range -16384 (-128*64*2) and 16256 (127*64*2) */
-    left <<= 16 - 14 - 1;
-    right <<= 16 - 14 - 1;
+    left = (unsigned int)left << (16 - 14 - 1);
+    right = (unsigned int)right << (16 - 14 - 1);
     /* [-32768, 32512] */
 
     if (sound_use_filter) {
@@ -276,7 +276,7 @@ static void sample16si_sinc_handler (void)
         int j;
         struct audio_channel_data *acd = &audio_channel[i];
         /* The sum rings with harmonic components up to infinity... */
-	int sum = acd->output_state << 17;
+	int sum = ((unsigned int)acd->output_state) << 17;
         /* ...but we cancel them through mixing in BLEPs instead */
         int offsetpos = acd->sinc_queue_head & (SINC_QUEUE_LENGTH - 1);
         for (j = 0; j < SINC_QUEUE_LENGTH; j += 1) {
diff --git a/src/frontends/common/amifilemagic.c b/src/frontends/common/amifilemagic.c
index 72e2969..ce36d37 100644
--- a/src/frontends/common/amifilemagic.c
+++ b/src/frontends/common/amifilemagic.c
@@ -1087,18 +1087,18 @@ void uade_filemagic(unsigned char *buf, size_t bufsize, char *pre,
     strcpy(pre, "EX");		/*Fashion Tracker */
 
 /* Magic ID */
-  } else if (buf[0x3a] == 'S' && buf[0x3b] == 'I' && buf[0x3c] == 'D' &&
+  } else if (bufsize > 0x42 && buf[0x3a] == 'S' && buf[0x3b] == 'I' && buf[0x3c] == 'D' &&
 	     buf[0x3d] == 'M' && buf[0x3e] == 'O' && buf[0x3f] == 'N' &&
 	     buf[0x40] == ' ' && buf[0x41] == 'I' && buf[0x42] == 'I') {
     strcpy(pre, "SID2");	/* SidMon II */
 
-  } else if (buf[0x28] == 'R' && buf[0x29] == 'O' && buf[0x2a] == 'N' &&
+  } else if (bufsize > 0x31 && buf[0x28] == 'R' && buf[0x29] == 'O' && buf[0x2a] == 'N' &&
 	     buf[0x2b] == '_' && buf[0x2c] == 'K' && buf[0x2d] == 'L' &&
 	     buf[0x2e] == 'A' && buf[0x2f] == 'R' && buf[0x30] == 'E' &&
 	     buf[0x31] == 'N') {
     strcpy(pre, "CM");		/* Ron Klaren (CustomMade) */
 
-  } else if (buf[0x3e] == 'A' && buf[0x3f] == 'C' && buf[0x40] == 'T'
+  } else if (bufsize > 0x45 && buf[0x3e] == 'A' && buf[0x3f] == 'C' && buf[0x40] == 'T'
 	     && buf[0x41] == 'I' && buf[0x42] == 'O' && buf[0x43] == 'N'
 	     && buf[0x44] == 'A' && buf[0x45] == 'M') {
     strcpy(pre, "AST");		/*Actionanamics */
@@ -1109,7 +1109,7 @@ void uade_filemagic(unsigned char *buf, size_t bufsize, char *pre,
   } else if (buf[26] == 'V' && buf[27] == '.' && buf[28] == '3') {
     strcpy(pre, "BP3");		/* Soundmon V2.2 */
 
-  } else if (buf[60] == 'S' && buf[61] == 'O' && buf[62] == 'N'
+  } else if (bufsize > 63 && buf[60] == 'S' && buf[61] == 'O' && buf[62] == 'N'
 	     && buf[63] == 'G') {
     strcpy(pre, "SFX13");	/* Sfx 1.3-1.8 */
 
@@ -1284,7 +1284,7 @@ void uade_filemagic(unsigned char *buf, size_t bufsize, char *pre,
 
   } else if (buf[12] == 0x00) {
     int s = (buf[12] * 256 + buf[13] + 1) * 14;
-    if (s < (bufsize - 91)) {
+    if (bufsize > 91 + s) {
       if (buf[80 + s] == 'p' && buf[81 + s] == 'a' && buf[82 + s] == 't'
 	  && buf[83 + s] == 't' && buf[87 + s] == 32 && buf[88 + s] == 'p'
 	  && buf[89 + s] == 'a' && buf[90 + s] == 't' && buf[91 + s] == 't') {
diff --git a/src/frontends/common/effects.c b/src/frontends/common/effects.c
index 48c2494..6a8220b 100644
--- a/src/frontends/common/effects.c
+++ b/src/frontends/common/effects.c
@@ -238,8 +238,8 @@ static void pan(int pan_amount, int16_t *sm, int frames)
 		l = sm[0];
 		r = sm[1];
 		m = (r - l) * pan_amount;
-		sm[0] = ((l << 8) + m) >> 8;
-		sm[1] = ((r << 8) - m) >> 8;
+		sm[0] = (((unsigned int)l << 8) + m) >> 8;
+		sm[1] = (((unsigned int)r << 8) - m) >> 8;
 		sm += 2;
 	}
 }
diff --git a/src/frontends/common/fifo.c b/src/frontends/common/fifo.c
index 0466a0c..98070c2 100644
--- a/src/frontends/common/fifo.c
+++ b/src/frontends/common/fifo.c
@@ -89,7 +89,7 @@ int fifo_write(struct fifo *fifo, const void *data, size_t bytes)
 {
 	assert(bytes < (((size_t) -1) / 2));
 
-	if ((fifo->upper + bytes) > fifo->capacity) {
+	if ((fifo->upper + bytes) > fifo->capacity || fifo->buf == NULL) {
 		void *newbuf;
 		size_t newcapacity = (fifo->upper + bytes) * 2;
 		if (newcapacity > (((size_t) -1) / 2))
diff --git a/src/frontends/common/songdb.c b/src/frontends/common/songdb.c
index 08608c5..ddf65c7 100644
--- a/src/frontends/common/songdb.c
+++ b/src/frontends/common/songdb.c
@@ -215,7 +215,7 @@ static int uade_open_and_lock(const char *filename, int create)
 			return -1;
 		}
 	}
-#if !defined(__CYGWIN__) && !defined(__MINGW32__) && !defined(__AMIGA__) && !defined(__AROS__) && !defined(__wasm__) && !defined(__ANDROID__) && !defined(__serenity__) && !defined(__vita__)
+#if !defined(__CYGWIN__) && !defined(__MINGW32__) && !defined(__AMIGA__) && !defined(__AROS__) && !defined(__wasm__) && !defined(__ANDROID__) && !defined(__serenity__) && !defined(__vita__) && !defined(__SYMBIAN32__)
 	if (lockf(fd, F_LOCK, 0)) {
 		fprintf(stderr, "uade: Unable to lock song.conf: %s (%s)\n",
 			filename, strerror(errno));
diff --git a/src/frontends/common/unixsupport.c b/src/frontends/common/unixsupport.c
index 8750093..bcadbbe 100644
--- a/src/frontends/common/unixsupport.c
+++ b/src/frontends/common/unixsupport.c
@@ -17,7 +17,9 @@
 #include <dirent.h>
 #include <errno.h>
 #include <fcntl.h>
+#ifndef __SYMBIAN32__
 #include <libgen.h>
+#endif
 #include <limits.h>
 #include <signal.h>
 #include <stdio.h>
diff --git a/src/frontends/include/uade/uadeipc.h b/src/frontends/include/uade/uadeipc.h
index b3cd97b..df8f93c 100644
--- a/src/frontends/include/uade/uadeipc.h
+++ b/src/frontends/include/uade/uadeipc.h
@@ -51,7 +51,7 @@ enum uade_msgtype {
 struct uade_msg {
 	uint32_t msgtype;
 	uint32_t size;
-	uint8_t data[0];
+	uint8_t data[];
 } __attribute__((packed));
 
 /*
diff --git a/src/frontends/include/uade/uadeutils.h b/src/frontends/include/uade/uadeutils.h
index bf1ad97..a654d79 100644
--- a/src/frontends/include/uade/uadeutils.h
+++ b/src/frontends/include/uade/uadeutils.h
@@ -6,18 +6,17 @@
 
 static inline uint16_t read_be_u16(void *s)
 {
-	uint16_t x;
-	uint8_t *ptr = (uint8_t *) s;
-	x = ptr[1] + (ptr[0] << 8);
-	return x;
+	const uint8_t *ptr = (const uint8_t *) s;
+	return ((uint16_t)ptr[0] << 8) | ptr[1];
 }
 
 static inline uint32_t read_be_u32(void *s)
 {
-	uint32_t x;
-	uint8_t *ptr = (uint8_t *) s;
-	x = (ptr[0] << 24) + (ptr[1] << 16) + (ptr[2] << 8) + ptr[3];
-	return x;
+	const uint8_t *ptr = (const uint8_t *) s;
+	return ((uint32_t)ptr[0] << 24) |
+	       ((uint32_t)ptr[1] << 16) |
+	       ((uint32_t)ptr[2] << 8) |
+	        ptr[3];
 }
 
 static inline void write_be_u32(void *s, uint32_t x)
diff --git a/src/machdep/maccess.h b/src/machdep/maccess.h
index 0baa92c..d30349a 100644
--- a/src/machdep/maccess.h
+++ b/src/machdep/maccess.h
@@ -10,14 +10,14 @@ static inline uae_u32 do_get_mem_long(uae_u32 *a)
 {
     uae_u8 *b = (uae_u8 *)a;
     
-    return (*b << 24) | (*(b+1) << 16) | (*(b+2) << 8) | (*(b+3));
+    return ((unsigned int)*b << 24) | ((unsigned int)*(b+1) << 16) | ((unsigned int)*(b+2) << 8) | (unsigned int)(*(b+3));
 }
 
 static inline uae_u16 do_get_mem_word(uae_u16 *a)
 {
     uae_u8 *b = (uae_u8 *)a;
     
-    return (*b << 8) | (*(b+1));
+    return ((unsigned int)*b << 8) | ((unsigned int)(*(b+1)));
 }
 
 static inline uae_u8 do_get_mem_byte(uae_u8 *a)
diff --git a/src/memory.c b/src/memory.c
index 1f76e0a..892d816 100644
--- a/src/memory.c
+++ b/src/memory.c
@@ -540,7 +540,7 @@ static int good_address_fd;
 
 static void init_mem_banks (void)
 {
-    int i;
+    unsigned int i;
     for (i = 0; i < 65536; i++)
 	put_mem_bank (i<<16, &dummy_bank);
 }
diff --git a/src/newcpu.c b/src/newcpu.c
index 2155d15..21d85a1 100644
--- a/src/newcpu.c
+++ b/src/newcpu.c
@@ -204,7 +204,11 @@ void init_m68k (void)
 	movem_index2[i] = 7-j;
 	movem_next[i] = i & (~(1 << j));
     }
-    for (i = 0 ; i < 256 ; i++) {
+    // avoid UB with i = 0
+    fpp_movem_index1[0] = 0;
+    fpp_movem_index2[0] = 7;
+    fpp_movem_next[0] = 0;
+    for (i = 1 ; i < 256 ; i++) {
 	int j;
 	for (j = 7 ; j >= 0 ; j--) {
 		if (i & (1 << j)) break;
@@ -550,7 +554,7 @@ uae_u32 get_disp_ea_020 (uae_u32 base, uae_u32 dp)
     uae_s32 regd = regs.regs[reg];
     if ((dp & 0x800) == 0)
 	regd = (uae_s32)(uae_s16)regd;
-    regd <<= (dp >> 9) & 3;
+    regd = (uae_s32)((uae_u32)regd << ((dp >> 9) & 3));
     if (dp & 0x100) {
 	uae_s32 outer = 0;
 	if (dp & 0x80) base = 0;
diff --git a/src/readcpu.c b/src/readcpu.c
index c5c792c..285a9f5 100644
--- a/src/readcpu.c
+++ b/src/readcpu.c
@@ -757,11 +757,9 @@ static void handle_merges (long int opcode)
     for (srcreg=0; srcreg < sbitdst; srcreg++) {
 	for (dstreg=0; dstreg < dstend; dstreg++) {
 	    uae_u16 code = opcode;
-#ifndef __clang_analyzer__
-// XXX warning: The result of the left shift is undefined because the right operand is negative [core.UndefinedBinaryOperatorResult]
+	    if (table68k[opcode].spos < 0 || table68k[opcode].dpos < 0) continue;
 	    code = (code & ~smsk) | (srcreg << table68k[opcode].spos);
 	    code = (code & ~dmsk) | (dstreg << table68k[opcode].dpos);
-#endif
 	    /* Check whether this is in fact the same instruction.
 	     * The instructions should never differ, except for the
 	     * Bcc.(BW) case. */
